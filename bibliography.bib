% Encoding: UTF-8
@book{HRSbook,
	author = {Hesthaven, Jan and Rozza, Gianluigi and Stamm, Benjamin},
	year = {2016},
	month = {01},
	pages = {},
	title = {Certified Reduced Basis Methods for Parametrized Partial Differential Equations},
	isbn = {978-3-319-22470-1},
	doi = {10.1007/978-3-319-22470-1}
}

@inproceedings{parapod,
	author = {Beattie, Christopher and Borggaard, Jeff and Gugercin, Serkan and Iliescu, Traian},
	year = {2007},
	month = {01},
	pages = {6750 - 6756},
	title = {A Domain Decomposition Approach to POD},
	doi = {10.1109/CDC.2006.377642}
}

@article{GalerkingPOD,
	author = {Kunisch, Karl and Volkwein, Stefan},
	year = {2002},
	month = {07},
	pages = {492-515},
	title = {Galerkin Proper Orthogonal Decomposition Methods for a General Equation in Fluid Dynamics},
	volume = {40},
	journal = {SIAM J. Numerical Analysis},
	doi = {10.1137/S0036142900382612}
}

@Article{Stabile2017CAIM,
	Title  = {{POD-Galerkin reduced order methods for CFD using Finite Volume Discretisation: vortex shedding around a circular cylinder}},
	Author = {Stabile, Giovanni and Hijazi, Saddam and Mola, Andrea and Lorenzi, Stefano and Rozza, Gianluigi},
	Journal = {Communications in Applied and Industrial Mathematics},
	Year = {(2017)},
	Volume = {8},
	Number = {1},
	pages = {210-236},
	Doi = {10.1515/caim-2017-0011}
}

@Article{Stabile2017CAF,
	Title = {{Finite volume POD-Galerkin stabilised reduced order methods for the parametrised incompressible Navier-Stokes equations}},
	Author = {Stabile, Giovanni and Rozza, Gianluigi},
	Journa = {Computers and Fluids},
	Year = {2018},
	Doi = {10.1016/j.compfluid.2018.01.035}
}

@Article{StrazzulloBallarinMosettiRozza2017,
	author = {Strazzullo, Maria and Ballarin, Francesco and Mosetti, Renzo and Rozza, Gianluigi},
	title = {Model Reduction for Parametrized Optimal Control Problems in Environmental Marine Sciences and Engineering},
	journal = {SIAM Journal on Scientific Computing},
	volume = {40},
	number = {4},
	pages = {B1055-B1079},
	year = {2018},
	doi = {10.1137/17M1150591}
}

@Article{quarteroni2007reduced,
	title={Reduced basis methods for optimal control of advection-diffusion problems},
	author={Quarteroni, Alfio and Rozza, Gianluigi and Quaini, Annalisa},
	year={2007},
	institution={RAS and University of Houston}
}
@article{Volkwein2001,
	author = {Volkwein, Stefan},
	year = {2001},
	month = {02},
	pages = {83 - 97},
	title = {Optimal Control of a Phase‐Field Model Using Proper Orthogonal Decomposition},
	volume = {81},
	journal = {ZAMM ‐ Journal of Applied Mathematics and Mechanics / Zeitschrift für Angewandte Mathematik und Mechanik},
	doi = {10.1002/1521-4001(200102)81:2<83::AID-ZAMM83>3.0.CO;2-R}
}
@book{holmes_lumley_berkooz_1996, 
	place={Cambridge}, 
	series={Cambridge Monographs on Mechanics}, 
	title={Turbulence, Coherent Structures, Dynamical Systems and Symmetry}, 
	DOI={10.1017/CBO9780511622700}, 
	publisher={Cambridge University Press}, 
	author={Holmes, Philip and Lumley, John L. and Berkooz, Gal}, 
	year={1996}, 
	collection={Cambridge Monographs on Mechanics}
}
@MISC{eigenweb,
 	author = {Ga\"{e}l Guennebaud and Beno\^{i}t Jacob and others},
 	title = {Eigen v3},
 	howpublished = {http://eigen.tuxfamily.org},
 	year = {2010}
 }

@article{demo18ezyrb,
	Author = {Demo, Nicola and Tezzele, Marco and Rozza, Gianluigi},
	Title = {{EZyRB: Easy Reduced Basis method}},
	Journal = {The Journal of Open Source Software},
	Volume = {3},
	Number = {24},
	Pages = {661},
	Year = {2018},
	Doi = {https://doi.org/10.21105/joss.00661}
}
@article{DEIM,
	author = {Chaturantabut, Saifon and Sorensen, Danny},
	year = {2010},
	month = {01},
	pages = {2737-2764},
	title = {Nonlinear Model Reduction via Discrete Empirical Interpolation},
	volume = {32},
	journal = {SIAM J. Scientific Computing},
	doi = {10.1137/090766498}
}


@book{LoggMardalEtAl2012,
	title = {Automated Solution of Differential Equations by the Finite Element Method},
	author = {Anders Logg and Kent-Andre Mardal and Garth N. Wells and others},
	editor = {Anders Logg and Kent-Andre Mardal and Garth N. Wells},
	year = {2012},
	publisher = {Springer},
	doi = {10.1007/978-3-642-23099-8},
	isbn = {978-3-642-23098-1},
}

@article{articleOpenFOAM,
	author = {Weller, H.G. and Tabor, Gavin and Jasak, Hrvoje and Fureby, Christer},
	year = {1998},
	month = {11},
	pages = {620-631},
	title = {A Tensorial Approach to Computational Continuum Mechanics Using Object Orientated Techniques},
	volume = {12},
	journal = {Computers in Physics},
	doi = {10.1063/1.168744}
}

@article{DALCIN20111124,
	title = "Parallel distributed computing using Python",
	journal = "Advances in Water Resources",
	volume = "34",
	number = "9",
	pages = "1124 - 1139",
	year = "2011",
	note = "New Computational Methods and Software Tools",
	issn = "0309-1708",
	doi = "https://doi.org/10.1016/j.advwatres.2011.04.013",
	url = "http://www.sciencedirect.com/science/article/pii/S0309170811000777",
	author = "Lisandro D. Dalcin and Rodrigo R. Paz and Pablo A. Kler and Alejandro Cosimo",
	keywords = "Python, MPI, PETSc",
	abstract = "This work presents two software components aimed to relieve the costs of accessing high-performance parallel computing resources within a Python programming environment: MPI for Python and PETSc for Python. MPI for Python is a general-purpose Python package that provides bindings for the Message Passing Interface (MPI) standard using any back-end MPI implementation. Its facilities allow parallel Python programs to easily exploit multiple processors using the message passing paradigm. PETSc for Python provides access to the Portable, Extensible Toolkit for Scientific Computation (PETSc) libraries. Its facilities allow sequential and parallel Python applications to exploit state of the art algorithms and data structures readily available in PETSc for the solution of large-scale problems in science and engineering. MPI for Python and PETSc for Python are fully integrated to PETSc-FEM, an MPI and PETSc based parallel, multiphysics, finite elements code developed at CIMEC laboratory. This software infrastructure supports research activities related to simulation of fluid flows with applications ranging from the design of microfluidic devices for biochemical analysis to modeling of large-scale stream/aquifer interactions."
}

@article{DALCIN2008655,
	title = "MPI for Python: Performance improvements and MPI-2 extensions",
	journal = "Journal of Parallel and Distributed Computing",
	volume = "68",
	number = "5",
	pages = "655 - 662",
	year = "2008",
	issn = "0743-7315",
	doi = "https://doi.org/10.1016/j.jpdc.2007.09.005",
	url = "http://www.sciencedirect.com/science/article/pii/S0743731507001712",
	author = "Lisandro Dalcín and Rodrigo Paz and Mario Storti and Jorge D’Elía",
	keywords = "Message passing, MPI, High-level languages, Parallel Python",
	abstract = "MPI for Python provides bindings of the message passing interface (MPI) standard for the Python programming language and allows any Python program to exploit multiple processors. In its first release, MPI for Python was constructed on top of the MPI-1 specification defining an object-oriented interface that closely followed the MPI-2 C++ bindings, and provided support for communications of general Python objects. In the latest release, this package is improved to enable direct blocking/non-blocking communication of numeric arrays, and to support almost all MPI-2 features. Improvements in communication performance have been tested in a Beowulf class cluster. Results showed a negligible overhead in comparison to compiled C code. MPI for Python is open source and available for download on the web (http://mpi4py.scipy.org/)."
}

@article{DALCIN20051108,
	title = "MPI for Python",
	journal = "Journal of Parallel and Distributed Computing",
	volume = "65",
	number = "9",
	pages = "1108 - 1115",
	year = "2005",
	issn = "0743-7315",
	doi = "https://doi.org/10.1016/j.jpdc.2005.03.010",
	url = "http://www.sciencedirect.com/science/article/pii/S0743731505000560",
	author = "Lisandro Dalcín and Rodrigo Paz and Mario Storti",
	keywords = "Message passing, MPI, High level languages, Parallel Python",
	abstract = "MPI for Python provides bindings of the Message Passing Interface (MPI) standard for the Python programming language and allows any Python program to exploit multiple processors. This package is constructed on top of the MPI-1 specification and defines an object-oriented interface which closely follows MPI-2 C++bindings. It supports point-to-point (sends, receives) and collective (broadcasts, scatters, gathers) communications of general Python objects. Efficiency has been tested in a Beowulf class cluster and satisfying results were obtained. MPI for Python is open source and available for download on the web (http://www.cimec.org.ar/python)."
}

@misc{Pipeline,
	Author = {Marco Tezzele and Nicola Demo and Andrea Mola and Gianluigi Rozza},
	Title = {An integrated data-driven computational pipeline with model order reduction for industrial and applied mathematics},
	Year = {2018},
	Eprint = {arXiv:1810.12364},
}

@article{sissaHPC,
	title = "The new supercomputer is called Ulysses",
	year = "2014 ",
	url = "https://www.sissa.it/announcement/new-supercomputer-called-ulysses",
	author = "Davide Ludovisi",
}

@misc{strazzullo2017model,
	title={Model Reduction For Parametrized Optimal Control Problems in Environmental Marine Sciences and Engineering},
	author={Maria Strazzullo and Francesco Ballarin and Renzo Mosetti and Gianluigi Rozza},
	year={2017},
	eprint={1710.01640},
	archivePrefix={arXiv},
	primaryClass={math.NA}
}
